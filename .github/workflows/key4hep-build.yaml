# Do not edit this file, it will be overwritten!
# The template file can be found in
# https://github.com/key4hep/key4hep-actions/blob/main/workflows/key4hep-build.yaml

name: Key4hep build
on:
  push:
    branches:
    - main
    - implement-histcmp
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '16 4 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        build_type: ["release", "nightly"]
        image: ["alma9"]
        stack: ["key4hep"]
        include:
          - build_type: nightly
            image: ubuntu24
            stack: key4hep
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: key4hep/key4hep-actions/cache-external-data@main
    - uses: key4hep/key4hep-actions/key4hep-build@main
      with:
        build_type: ${{ matrix.build_type }}
        image: ${{ matrix.image }}
        stack: ${{ matrix.stack }}

  histcmp_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          python-version: "3.12"
          channels: conda-forge

      - name: Install ROOT and histcmp
        shell: bash -l {0}
        run: |
          conda install -y root
          pip install histcmp==0.8.1
      
      - name: Generate new histograms and download reference
        shell: bash -l {0}
        run: |
          # Make the script executable
          chmod +x CI/generate_material_comparisons.sh
          
          # Run the material histogram generation script
          ./CI/generate_material_comparisons.sh

      - name: Run histcmp tests
        shell: bash -l {0}
        run: |
          # Compare each geometry's histograms
          mkdir -p histcmp_results
          
          for geometry_dir in mat_scan_results/*/; do
            if [ -d "$geometry_dir" ]; then
              geometry_name=$(basename "$geometry_dir")
              
              for compact_dir in "${geometry_dir}"*/; do
                if [ -d "$compact_dir" ]; then
                  compact_name=$(basename "$compact_dir")
                  
                  # Compare each histogram type
                  for hist_type in x0 lambda depth; do
                    current_file="${compact_dir}/${hist_type}_summed_hist.root"
                    ref_file="${compact_dir}/${hist_type}_ref_summed_hist.root"
                    
                    if [ -f "$current_file" ] && [ -f "$ref_file" ]; then
                      echo "Comparing ${geometry_name}/${compact_name}/${hist_type}"
                      
                      histcmp "$ref_file" "$current_file" \
                        --title "Material Scan Comparison: ${geometry_name}/${compact_name}/${hist_type}" \
                        --output "histcmp_results/${geometry_name}_${compact_name}_${hist_type}" \
                        --format png \
                        || echo "Comparison failed for ${geometry_name}_${compact_name}_${hist_type}"
                    else
                      echo "Warning: Missing files for comparison of ${geometry_name}/${compact_name}/${hist_type}"
                      echo "  Current file: $current_file (exists: $([ -f "$current_file" ] && echo "yes" || echo "no"))"
                      echo "  Ref file: $ref_file (exists: $([ -f "$ref_file" ] && echo "yes" || echo "no"))"
                    fi
                  done
                fi
              done
            fi
          done

      - name: Upload histcmp plots and results
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: histcmp-results
          path: |
            histcmp_results/
            mat_scan_results/
            reference_results/
